'This is a public module that allows both the engineer side and the management side access and edit the Daily Sheet
Option Explicit On
Imports System.Environment
Imports System.Windows.Forms
Imports System.Globalization
Imports System.IO
Imports System.Data.OleDb
Imports System.Data
Imports System.Linq
Imports System.Web.UI.WebControls
Imports Excel = Microsoft.Office.Interop.Excel
Imports Microsoft.Office.Interop.Excel
Imports Word = Microsoft.Office.Interop.Word
Imports System.Collections.Generic
Imports System.Net
Imports System.Net.Mail
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq 'package for de-serialising JSON objects from web-requests
'Json.net was recommended by http://stackoverflow.com/questions/21676708/simple-working-example-of-json-net-in-vb-net
'after a Google search for "json in vb.net"


Public Structure tEngineerExperience
    Public engrID As Integer
    Public engrSurname As String
    Public engrScore As Integer
    Public engrWorkTerminal As String
End Structure

Public Class tJsonFltInfo
    Public actual_ident As String
    Public aircrafttype As String
    Public arrivaltime As Integer
    Public departuretime As Integer
    Public destination As String
    Public ident As String
    Public meal_service As String
    Public origin As String
    Public seats_cabin_business As Integer
    Public seats_cabin_coach As Integer
    Public seats_cabin_first As Integer
    Public next_offset As Integer
End Class

'structure to hold certain JSON objects
Public Structure tHoldFltDetails
    Public carrierFSCode As String
    Public flightNumber As String
    Public arrivalTerminal As String
    Public actualGateArrival As String
End Structure

'public classes to hold all the JSON objects
' Generated by Xamasoft JSON Class Generator
' http://www.xamasoft.com/json-class-generator

Public Class Airport

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property RequestedCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FsCode As String
End Class

Public Class Carrier

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property RequestedCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FsCode As String
End Class

Public Class DateNow

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Year As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Month As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Day As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Interpreted As String
End Class

Public Class HourOfDay

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Requested As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Interpreted As Integer
End Class

Public Class NumHours

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Requested As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Interpreted As Integer
End Class

Public Class Utc

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Requested As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Interpreted As Boolean
End Class

Public Class CodeType

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Requested As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Interpreted As String
End Class

Public Class MaxFlights
End Class

Public Class ExtendedOptions
End Class

Public Class Request

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Airport As Airport

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Carrier As Carrier

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateHere As Date

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property HourOfDay As HourOfDay

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property NumHours As NumHours

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Utc As Utc

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property CodeType As CodeType

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property MaxFlights As MaxFlights

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ExtendedOptions As ExtendedOptions

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Url As String
End Class

Public Class Airline

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Fs As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Iata As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Icao As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Name As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Active As Boolean

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property PhoneNumber As String
End Class

Public Class Airport2

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Fs As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Iata As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Icao As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Faa As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Name As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Street1 As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Street2 As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property City As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property CityCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property StateCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property PostalCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property CountryCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property CountryName As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property RegionName As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property TimeZoneRegionName As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property WeatherZone As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property LocalTime As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property UtcOffsetHours As Double

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Latitude As Double

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Longitude As Double

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ElevationFeet As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Classification As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Active As Boolean

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DelayIndexUrl As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property WeatherUrl As String
End Class

Public Class Equipment

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Iata As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Name As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property TurboProp As Boolean

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Jet As Boolean

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Widebody As Boolean

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Regional As Boolean
End Class

Public Class Appendix

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Airlines As Airline()

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Airports As Airport2()

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Equipments As Equipment()
End Class

Public Class DepartureDate

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ArrivalDate

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class Schedule

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightType As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ServiceClasses As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Restrictions As String
End Class

Public Class PublishedDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class PublishedArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ScheduledGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ActualRunwayDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ScheduledGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class EstimatedGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ActualRunwayArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ActualGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class ActualGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class EstimatedGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class FlightPlanPlannedDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class EstimatedRunwayDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class FlightPlanPlannedArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class EstimatedRunwayArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateLocal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DateUtc As String
End Class

Public Class OperationalTimes

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property PublishedDeparture As PublishedDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property PublishedArrival As PublishedArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledGateDeparture As ScheduledGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ActualRunwayDeparture As ActualRunwayDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledGateArrival As ScheduledGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property EstimatedGateArrival As EstimatedGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ActualRunwayArrival As ActualRunwayArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ActualGateDeparture As ActualGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ActualGateArrival As ActualGateArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property EstimatedGateDeparture As EstimatedGateDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightPlanPlannedDeparture As FlightPlanPlannedDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property EstimatedRunwayDeparture As EstimatedRunwayDeparture

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightPlanPlannedArrival As FlightPlanPlannedArrival

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property EstimatedRunwayArrival As EstimatedRunwayArrival
End Class

Public Class Codeshare

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FsCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightNumber As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Relationship As String
End Class

Public Class FlightDurations

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledBlockMinutes As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property AirMinutes As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property BlockMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property TaxiInMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property TaxiOutMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledAirMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledTaxiOutMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledTaxiInMinutes As Integer?
End Class

Public Class AirportResources

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ArrivalTerminal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DepartureTerminal As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DepartureGate As String
End Class

Public Class FlightEquipment

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ScheduledEquipmentIataCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ActualEquipmentIataCode As String
End Class

Public Class Delays

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DepartureGateDelayMinutes As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ArrivalGateDelayMinutes As Integer?

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ArrivalRunwayDelayMinutes As Integer?
End Class

Public Class FlightStatus

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightId As Integer

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property CarrierFsCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightNumber As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DepartureAirportFsCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ArrivalAirportFsCode As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property DepartureDate As DepartureDate

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property ArrivalDate As ArrivalDate

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Status As String

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Schedule As Schedule

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property OperationalTimes As OperationalTimes

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Codeshares As Codeshare()

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightDurations As FlightDurations

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property AirportResources As AirportResources

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightEquipment As FlightEquipment

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Delays As Delays
End Class

Public Class mainAPICallRoot

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Request As Request

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property Appendix As Appendix

    <Newtonsoft.Json.JsonPropertyAttribute()> _
    Public Property FlightStatuses() As FlightStatus()
End Class

Module DailySheetOperations
    'all need to be public subroutines

    'possibly not needed- fill the daily sheets directly
    'BUT! Potentially need a way for more than one terminal. Look into
    Public rosterMonth As String = MonthName(Month(Now), True)
    Public rosterYear As String = Year(Now)
    Public rosterFileName As String = "C:\Users\zande_000\Documents\LEMSRosters" & "\ShiftRosterFor" & rosterMonth & rosterYear & ".xls"
    Public engineersToday(MgmtLEMSProcess.dsEngineersOnDay.Tables(0).Rows.Count) As tEngineerExperience
    Public firstSave As Boolean = False
    Public sheetID As Integer
    Public drT4Operation As OleDbDataReader
    Public drT3Operation As OleDbDataReader
    Public drOtherOperations As OleDbDataReader
    Public dtT4Operation As New System.Data.DataTable
    Public dtT3Operation As New System.Data.DataTable
    Public dtOtherOperations As New System.Data.DataTable
    Public dAdapT4Operation As OleDbDataAdapter
    Public dAdapT3Operation As OleDbDataAdapter
    Public dAdapOtherOperations As OleDbDataAdapter
    'this is used for getting the JSON request
    'must be allowed to be altered in the settings should anything change
    Public appName As String = "d3b8b796"
    Public apiKey As String = "4dbd0882d201bcf8a608401b72ebf153"
    Public flightStatsRequest As WebRequest
    'public arrays to fill the datagridviews and the database from
    Public terminal4DGVArray(100) As tHoldFltDetails
    Public terminal3DGVArray(100) As tHoldFltDetails
    Public terminalOthersDGVArray(100) As tHoldFltDetails
    Public engineersOnDutyForDSA() As Integer
    Public engineersOnDutyDGV As New DataGridView
    'public variables to hold the credentials for sending the daily sheet email
    Public senderAddress As String
    Public senderPassword As String
    Public senderEmpID As String
    'public array to hold the daily sheet recipients
    Public localDsRecipients(50) As String


    Public Sub mainControl()
        'call this routine and then the subsequent subroutines that split the engineer experience
        'i.e. 'chain' the subroutines so one follows after the other to prevent call backs so that local
        'variables can be suitably be preserved

        'checks to see if there is already an existing dailysheet
        checkMostRecentDate()

        If firstSave = False Then
            getEngineers()
            firstSaveDGV()
            'gets the engineers
            'sorts the engineers
            'assigns the engineers
            'perform the first save of the dgv
            'fill the datagridviews directly from the database
        Else
            'get the most recent sheet
            getMostRecentSheetID()
            'gets the engineers
            getEngineers()
            'fill the datagridviews
            fillDGVs()
        End If
    End Sub

    Private Sub checkMostRecentDate()
        'gets the most recent dailysheet date and compares it to the
        'current date. This allows for the system to check if there is
        'already a daily sheet, in which case it will not add anymore
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim dAdapMostRecentSheet As OleDbDataAdapter
        Dim dsMostRecentSheet As New DataSet
        Dim sql As String
        Dim todayDate As Date
        Dim todayStringDate As String
        Dim readBackStringDate As String

        todayDate = Now.Date

        'check to see if there is a sheet with the current date
        sql = "SELECT LAST([Sheet].[Sheet_Date]) FROM [Sheet]"
        Dim cmd As New OleDbCommand(sql, connec)
        dAdapMostRecentSheet = New OleDbDataAdapter(sql, connec)
        connec.Open()
        dAdapMostRecentSheet.Fill(dsMostRecentSheet, "Sheet")
        connec.Close()
        If Not IsDBNull(dsMostRecentSheet.Tables(0).Rows(0)("Expr1000")) Then
            readBackStringDate = (dsMostRecentSheet.Tables(0).Rows(0)("Expr1000"))
        Else
            readBackStringDate = "N/A"
        End If

        todayStringDate = todayDate.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))

        If todayStringDate <> readBackStringDate Then
            'sets the first save boolean
            firstSave = False
        Else
            firstSave = True
        End If

    End Sub

    'Public sortView As New DataView(MgmtLEMSProcess.dsEngineersOnDay.Tables(0))
    Private Sub getEngineers()

        'this needs to be made independent of the management side
        'this is done by loading the excel file here, copying it to a datatable and removing all the rows that contain
        ' "R" or "V". At the same time, the engineers dataset needs to be loaded and each of the according rows
        'removed at the same time
        Dim inFileName As String = rosterFileName
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim dAdapEngrsOnDuty As New OleDbDataAdapter
        Dim cmd As New OleDbCommand
        Dim dsEngrsOnDutyForDSA As New DataSet
        Dim sql As String
        Dim valueString As String

        importFromExcelFile(inFileName)

        'gets the fields from the engineer table to use for comparison and processing
        sql = "SELECT [Engineers].[Engineer_ID], [Engineers].[Surname], [Engineers].[Total_Qual_Score] FROM [Engineers]"
        cmd = New OleDbCommand(sql, connec)
        dAdapEngrsOnDuty = New OleDbDataAdapter(sql, connec)
        connec.Open()
        dAdapEngrsOnDuty.Fill(dsEngrsOnDutyForDSA, "Engineers")
        connec.Close()

        engineersOnDutyForDSA = (From myRow In dsEngrsOnDutyForDSA.Tables(0).AsEnumerable Select myRow.Field(Of Integer)("Engineer_ID")).ToArray

        'sorts through the data to determine which engineers are working on the
        'current day
        For counter = 0 To engineersOnDutyDGV.Rows.Count - 2
            If counter = engineersOnDutyDGV.Rows.Count Then
                Exit For
            End If

            valueString = engineersOnDutyDGV.Rows(counter).Cells(Now.Day).Value.ToString
            If valueString = "R" Or valueString.Contains("TRNG") Or valueString = "Sick" Or valueString = "V" Or valueString.Contains("MED") Or valueString.Contains("Other") Then
                'engineersOnDutyDGV.Rows.Remove(engineersOnDutyDGV.Rows(counter))
                'removes the engineers that are not working
                'so the correct qual scores can be used
                engineersOnDutyForDSA(counter) = Nothing
                'counter = counter - 1
            End If
        Next

        'copies over the engineer IDs so that they can be saved with the daily sheet ID in the link table
        Dim toSortEngrsToday(dsEngrsOnDutyForDSA.Tables(0).Rows.Count - 1) As tEngineerExperience
        For counter = 0 To engineersOnDutyForDSA.Length - 1
            If engineersOnDutyForDSA(counter) <> Nothing Then
                toSortEngrsToday(counter).engrID = dsEngrsOnDutyForDSA.Tables(0).Rows(counter)("Engineer_ID")
                toSortEngrsToday(counter).engrSurname = dsEngrsOnDutyForDSA.Tables(0).Rows(counter)("Surname")
                toSortEngrsToday(counter).engrScore = dsEngrsOnDutyForDSA.Tables(0).Rows(counter)("Total_Qual_Score")
            End If
        Next

        sortEngineers(toSortEngrsToday)

        'Dim localEngrIDCopyArray(100) As Integer
        'Dim localEngrSurnameArray(100) As String

        'Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        'Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        'Dim DBsource As String = "Data Source=" & dbfilename
        'Dim connec As OleDbConnection = New OleDbConnection(DBconn & DBsource)
        'Dim dAdapEngrScores As New OleDbDataAdapter
        'Dim cmd As New OleDbCommand
        'Dim dsEngrsForQualScores As New DataSet
        'Dim sql As String

        'this copies over the data from the public arrays in the management side
        'For counter = 0 To MgmtLEMSProcess.engineerSurnamesOnDay.Length - 1
        '    If counter > MgmtLEMSProcess.engineerSurnamesOnDay.Length - 1 Then
        '        Exit For
        '    End If
        '    If Not MgmtLEMSProcess.engineerIDsOnDay(counter) = Nothing And Not MgmtLEMSProcess.engineerSurnamesOnDay(counter) = Nothing Then
        '        engineersToday(counter).engrSurname = MgmtLEMSProcess.engineerSurnamesOnDay(counter)
        '        engineersToday(counter).engrID = MgmtLEMSProcess.engineerIDsOnDay(counter)
        '    End If
        'Next


        'gets the total qual score for each engineer from the database
        'sql = "SELECT [Engineers].[Total_Qual_Score] FROM [Engineers] WHERE [Engineer_ID] = ?"
        'cmd = New OleDbCommand(sql, connec)
        'cmd.CommandType = CommandType.Text
        'connec.Open()
        'For counter = 0 To engineersToday.Length
        '    'gets the qual score data from the engineers table
        '    cmd.Parameters.AddWithValue("@Engineer_ID", engineersToday(counter).engrID)
        '    dAdapEngrScores.Fill(dsEngrsForQualScores, "Engineers")
        '    'fills the structure
        '    engineersToday(counter).engrScore = CInt(dsEngrsForQualScores.Tables(0).Rows(0)("Total_Qual_Score"))
        '    dsEngrsForQualScores.Clear()
        '    cmd.Parameters.Clear()
        'Next
        'connec.Close()

        'get the engineer qualification scores
        'sql = "SELECT [Engineers].[Engineer_ID], [Engineers].[Surname], [Engineers].[Total_Qual_Scores] FROM [Engineers]"
        'cmd = New OleDbCommand(sql, connec)
        'connec.Open()
        'dAdapEngrScores.Fill(dsEngrsForQualScores, "Engineers")
        'connec.Close()

    End Sub

    Public Sub importFromExcelFile(ByVal inFileName As String)

        'the following code was adapted from:
        'http://vb.net-informations.com/excel-2007/vb.net_excel_2007_create_file.htm

        Dim xlApp As Excel.Application = New Microsoft.Office.Interop.Excel.Application()
        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkBooks As Excel.Workbooks
        Dim xlWorkSheet As Excel.Worksheet
        Dim misValue As Object = System.Reflection.Missing.Value
        Dim workSheetRange As Excel.Range
        Dim inputArray(,) As Object
        'my variables
        Dim colTotal As Integer
        Dim rowTotal As Integer

        'copied code
        xlWorkBooks = xlApp.Workbooks
        xlWorkBook = xlWorkBooks.Open(inFileName)
        xlWorkSheet = xlWorkBook.Sheets("sheet1")
        workSheetRange = xlWorkSheet.UsedRange

        inputArray = workSheetRange.Value

        colTotal = workSheetRange.Columns.Count 'System.DateTime.DaysInMonth(Year(Now), Month(Now))
        rowTotal = workSheetRange.Rows.Count

        fillDataGridViews(colTotal, rowTotal, inputArray)

        xlWorkBook.Close()
        xlApp.Quit()

        releaseObject(workSheetRange)
        releaseObject(xlWorkSheet)
        releaseObject(xlWorkBook)
        releaseObject(xlWorkBooks)
        releaseObject(xlApp)

    End Sub

    Public Sub fillDataGridViews(ByVal noOfColumns As Integer, ByVal noOfRows As Integer, ByRef inArray(,) As Object)
        'fills a temporary datagridview so that the daily sheet can establish which engineers are working on on the current day
        'whilst being independent of either systems side

        'adds the specific number of columns 
        For counter = 0 To noOfColumns
            engineersOnDutyDGV.Columns.Add(("Day" & counter), counter)
        Next
        'adds the specific number of rows
        engineersOnDutyDGV.Rows.Add(noOfRows - 2)


        For rowCounter = 2 To noOfRows
            For columnCounter = 2 To noOfColumns
                engineersOnDutyDGV.Rows(rowCounter - 2).Cells(columnCounter - 1).Value = inArray(rowCounter, columnCounter)
            Next
        Next

    End Sub

    Private Sub sortEngineers(ByRef inArray() As tEngineerExperience)
        'bubble sort as there is a relatively small amount of records

        Dim temp As tEngineerExperience

        For counter = 0 To inArray.Length - 1
            For inCounter = 0 To inArray.Length - 1
                If inCounter + 1 = inArray.Length Then
                    Exit For
                End If
                If inArray(inCounter).engrScore < inArray(inCounter + 1).engrScore Then
                    temp = inArray(inCounter)
                    inArray(inCounter) = inArray(inCounter + 1)
                    inArray(inCounter + 1) = temp
                End If
            Next
        Next

        splitEngineers(inArray)

    End Sub

    Private Sub splitEngineers(ByRef inArray() As tEngineerExperience)
        'split engineer experience similar to a bin-packing algorithm but alter it so that
        'the experience is split so there is at least one senior engineer at each terminal and then
        'make up the difference with intermediate and junior engineers
        'create the arrays based on which terminals are used- work out later

        Dim terminalOne(100) As tEngineerExperience
        Dim terminalTwo(100) As tEngineerExperience
        Dim terminalOthers(100) As tEngineerExperience
        'allocation algorithm control variables:
        Dim actualEngrNumbers As Integer
        Dim noForEachList As Integer
        Dim innerCount As Integer
        Dim outAdvCount As Integer
        Dim inputTerminals As Integer = 2 'therefore 3 terminals

        'jagged array declaration
        Dim terminalArray()() As tEngineerExperience = {terminalOne, terminalTwo, terminalOthers}

        'assigning the highest scored engineers to the terminals
        For counter = 0 To inputTerminals
            terminalArray(counter)(0) = inArray(counter)
        Next

        'find the engineers who score under 15
        'For counter = (inArray.Length - 1) To 0 Step -1
        '    If inArray(counter).engrScore = 15 Then
        '        startCounter = counter
        '    End If
        'Next

        'this algorithm is an adapted bin-packing algorithm
        'it receives a jagged array made up of smaller arrays that already have the highest
        'scored engineers in the first element, so that there is always one person, per terminal
        'that is qualified to sign the paperwork.
        'the algorithm then goes through the rest of the array of names and allocates each
        'to a terminal. This could be updated to reflect less qualified engineers being paired
        'with more senior engineers. Something to work out.

        'gets the actual number of engineers rather than take into account null values in the 
        'array
        actualEngrNumbers = 0
        For counter = 1 To inArray.Length - 1
            If inArray(counter).engrID <> Nothing Then
                actualEngrNumbers = actualEngrNumbers + 1
            End If
        Next
        'a redim is used because it makes referencing easier
        'it is understood that this functionality is ONLY available within VB.Net
        'as in other languages arrays are strictly static data structures
        ReDim Preserve inArray(actualEngrNumbers)

        noForEachList = Math.Floor((actualEngrNumbers / inputTerminals))
        outAdvCount = 0
        Dim storedCounter As Integer = inputTerminals + 1

        Do
            innerCount = 1
            For counter = storedCounter To inArray.Length - 1
                If innerCount > noForEachList Then
                    storedCounter = counter
                    Exit For
                End If
                'check when each array being filled is full and then advance the outer count 
                'to adjust which array is being referenced
                terminalArray(outAdvCount)(innerCount) = inArray(counter)
                innerCount = innerCount + 1
            Next
            outAdvCount = outAdvCount + 1

        Loop Until outAdvCount = inputTerminals

        'assigns the terminal number that each engineer will be working at to the array
        For outCount = 0 To 2
            For inCount = 0 To noForEachList
                terminalArray(outCount)(inCount).engrWorkTerminal = outCount
            Next
        Next

        fillListsFromArrays(terminalArray, inputTerminals, noForEachList)

    End Sub

    Public Sub fillListsFromArrays(ByRef inJaggedTerminalArray()() As tEngineerExperience, ByVal inNoTerminals As Integer, ByVal noForEachList As Integer)
        Dim preventBiasNo As Integer
        Dim listBoxCount As Integer

        'an array to contain the listboxes- need to add the parameters for the engineer side
        Dim listBoxArrayMgmt() As System.Windows.Forms.ListBox = {MgmtLEMSProcess.CDST4AddEngrPanelLB, MgmtLEMSProcess.CDST3AddEngrPanelLB}
        Dim listBoxArrayEngr() As System.Windows.Forms.ListBox = {EngrLEMSProcess.CDSTT4AddEngrPanelLB, EngrLEMSProcess.CDSTT3AddEngrPanelLB}

        'fill the list boxes with the names from the arrays
        'need to build in a way to alter the names in the arrays if there is a last minute shift change

        'each terminal array must be saved to the database to show which engineers
        'are on which sheet, i.e. save the engineer ID to the link table
        'the AMTs column is only there for exporting to a PDF and printing.
        'searching the DSArchive will make use of the link table
        'so need to save each element of the array to the db

        'generate a random number to prevent bias of specific engineers only working at specific terminals
        Randomize()
        preventBiasNo = CInt(Int((1 * Rnd()) + 1))

        'need to check if the terminal array is empty/unassigned

        listBoxCount = 0
        Do
            If preventBiasNo > 2 Then
                preventBiasNo = 0
            End If
            For counter = 0 To noForEachList
                If inJaggedTerminalArray(preventBiasNo)(counter).engrSurname = Nothing Then
                    preventBiasNo = preventBiasNo + 1
                    Exit For
                Else
                    listBoxArrayMgmt(listBoxCount).Items.Add(inJaggedTerminalArray(preventBiasNo)(counter).engrSurname)
                    listBoxArrayEngr(listBoxCount).Items.Add(inJaggedTerminalArray(preventBiasNo)(counter).engrSurname)
                End If
            Next
            listBoxCount = listBoxCount + 1
            preventBiasNo = preventBiasNo + 1
        Loop Until listBoxCount > 1



    End Sub

    Private Sub getMostRecentSheetID()
        'gets the most recent daily sheet id
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim dAdapMostRecentSheet As OleDbDataAdapter
        Dim dsMostRecentSheet As New DataSet
        Dim sql As String
        Dim cmd As New OleDbCommand

        sql = "SELECT LAST([Sheet].[Sheet_ID]) FROM [Sheet]"
        cmd = New OleDbCommand(Sql, connec)
        dAdapMostRecentSheet = New OleDbDataAdapter(Sql, connec)
        connec.Open()
        dAdapMostRecentSheet.Fill(dsMostRecentSheet, "Sheet")
        connec.Close()
        sheetID = CInt(dsMostRecentSheet.Tables(0).Rows(0)("Expr1000"))

    End Sub

    Public Sub firstSaveDGV()
        'this subroutine retrieves the newest DS id number
        'and then allows for future saves for the day
        'it also saves all the newest entries for the day

        'this line below needs to be changed so that the dgvs on both sides can be bound to the dataset
        'Dim dgvArray() As DataGridView = {MgmtLEMSProcess.CDST4DailySheetDGV, MgmtLEMSProcess.CDST3DailySheetDGV, Extra_Terminals_Form.CDSAllDailySheetDGV}
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim dsMostRecentSheet As New DataSet
        Dim sql As String
        Dim todayDate As Date

        todayDate = Now.Date

        sql = "INSERT INTO [Sheet]([Sheet_Date]) VALUES (?)"

        Dim cmd As New OleDbCommand(sql, connec)
        cmd.CommandType = CommandType.Text
        cmd.Parameters.AddWithValue("@Sheet_Date", todayDate.ToString("D", CultureInfo.CreateSpecificCulture("en-US")))
        connec.Open()
        cmd.ExecuteNonQuery()
        connec.Close()

        getMostRecentSheetID()

        '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        '/////////////////////////////////////////////////////////////////
        'MAKE API CALL HERE!
        getJSONResponse()
        '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        '/////////////////////////////////////////////////////////////////

        'trim down the arrival dates and times to just the times:
        For counter = 0 To terminal4DGVArray.Length - 1
            If terminal4DGVArray(counter).actualGateArrival <> "N/A" Then
                terminal4DGVArray(counter).actualGateArrival = Mid(terminal4DGVArray(counter).actualGateArrival, 1, 16)
                terminal4DGVArray(counter).actualGateArrival = Mid(terminal4DGVArray(counter).actualGateArrival, 12, 5)
            End If
        Next
        For counter = 0 To terminal3DGVArray.Length - 1
            If terminal3DGVArray(counter).actualGateArrival <> "N/A" Then
                terminal3DGVArray(counter).actualGateArrival = Mid(terminal3DGVArray(counter).actualGateArrival, 1, 16)
                terminal3DGVArray(counter).actualGateArrival = Mid(terminal3DGVArray(counter).actualGateArrival, 12, 5)
            End If
        Next
        If terminalOthersDGVArray.Length > 0 Then
            For counter = 0 To terminalOthersDGVArray.Length - 1
                If terminalOthersDGVArray(counter).actualGateArrival <> "N/A" Then
                    terminalOthersDGVArray(counter).actualGateArrival = Mid(terminalOthersDGVArray(counter).actualGateArrival, 1, 16)
                    terminalOthersDGVArray(counter).actualGateArrival = Mid(terminalOthersDGVArray(counter).actualGateArrival, 12, 5)
                End If
            Next
        End If

        'fills the datagridviews with the flight numbers and arrival times should they be present
        'For counter = 0 To terminal4DGVArray.Length - 1
        '    dgvArray(0).Rows(counter).Cells(0).Value = terminal4DGVArray(counter).flightNumber
        '    If terminal4DGVArray(counter).actualGateArrival <> "N/A" Then
        '        dgvArray(0).Rows(counter).Cells(2).Value = terminal4DGVArray(counter).actualGateArrival
        '    End If
        'Next
        'For counter = 0 To terminal3DGVArray.Length - 1
        '    dgvArray(1).Rows(counter).Cells(0).Value = terminal3DGVArray(counter).flightNumber
        '    If terminal3DGVArray(counter).actualGateArrival <> "N/A" Then
        '        dgvArray(1).Rows(counter).Cells(2).Value = terminal4DGVArray(counter).actualGateArrival
        '    End If
        'Next
        'If terminalOthersDGVArray.Length > 0 Then
        '    For counter = 0 To terminalOthersDGVArray.Length - 1
        '        dgvArray(2).Rows(counter).Cells(0).Value = terminal3DGVArray(counter).flightNumber
        '        If terminal3DGVArray(counter).actualGateArrival <> "N/A" Then
        '            dgvArray(2).Rows(counter).Cells(2).Value = terminal4DGVArray(counter).actualGateArrival
        '        End If
        '    Next
        'End If

        'puts the arrival flight data into the database
        'this is so that the datagridviews can be bound FROM the database, rather than the database being fully
        'reliant on the dgvs

        sql = "INSERT INTO [Entries]([Sheet_ID], [Flt_In], [Time_In], [Terminal]) VALUES (?,?,?,?)"
        cmd = New OleDbCommand(sql, connec)
        cmd.CommandType = CommandType.Text
        connec.Open()
        'fill the database with only the the flights in the arrays
        Dim terminalsArray()() As tHoldFltDetails = {terminal4DGVArray, terminal3DGVArray, terminalOthersDGVArray}
        For counter = 0 To 2
            If terminalsArray(counter).Length = 0 Then
                Exit For
            End If
            For innerCounter = 0 To terminalsArray(counter).Length - 1
                'add the parameters to the query
                cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
                cmd.Parameters.AddWithValue("@Flt_In", terminalsArray(counter)(innerCounter).flightNumber)
                cmd.Parameters.AddWithValue("@Time_In", terminalsArray(counter)(innerCounter).actualGateArrival)
                cmd.Parameters.AddWithValue("@Terminal", terminalsArray(counter)(innerCounter).arrivalTerminal)
                cmd.ExecuteNonQuery()
                cmd.Parameters.Clear()
            Next
        Next
        connec.Close()

        sql = "INSERT INTO [EN/SHEET]([EN_ID], [SHEET_ID]) VALUES (?,?)"
        cmd = New OleDbCommand(sql, connec)
        cmd.CommandType = CommandType.Text
        connec.Open()
        For counter = 0 To engineersOnDutyForDSA.Length - 1
            If engineersOnDutyForDSA(counter) <> 0 Then
                cmd.Parameters.AddWithValue("@EN_ID", engineersOnDutyForDSA(counter))
                cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
                cmd.ExecuteNonQuery()
                cmd.Parameters.Clear()
            End If
        Next
        connec.Close()

        'moves to the next subroutine to bind the data
        fillDGVs()

    End Sub

    Sub getJSONResponse()
        'variables to hold the airport and airline
        'so that the program can be expanded
        Dim arrivalAirport As String
        Dim airlineToSearch As String
        'date values to dynamically alter the query
        Dim yearNow As Integer
        Dim monthNow As Integer
        Dim dayNow As Integer
        'individual strings for getting the JSON requst
        Dim fltStatsJsonStringDest06 As String
        Dim fltStatsJsonStringDest12 As String
        Dim fltStatsJsonStringDest18 As String
        'array to hold individual JSON fields for later processing
        Dim identsArray(300) As tHoldFltDetails
        'arrays of the structure to hold data to fill the dgvs from as well as reference counters
        Dim terminal4ReferenceCounter As Integer
        Dim terminal3ReferenceCounter As Integer
        Dim terminalOthersReferenceCounter As Integer
        'array the lengths of the objects for the looping routine
        Dim arrayOfLengths(2) As Integer
        'counter to reference the public structure elements
        Dim arrayReferenceCounter As Integer
        'counter to resize the array
        Dim arrayLengthCounter As Integer
        'check if there is an Internet connection
        Dim checkString As String

        'sets the year, month and day for the query to the values equal to the moment in time now
        yearNow = CInt(Now.Year)
        monthNow = CInt(Now.Month)
        dayNow = CInt(Now.Day)

        'temporary hard-code for airport and airline
        arrivalAirport = "LHR"
        airlineToSearch = "DL"

        'gets the web request for each of the strings
        checkString = returnData("https://api.flightstats.com/flex/flightstatus/rest/v2/json/airport/status/" & arrivalAirport & "/arr/" & yearNow & "/" & monthNow & "/" & dayNow & "/6?appId=" & appName & "&appKey=" & apiKey & "&utc=false&numHours=6&carrier=" & airlineToSearch & "&codeType=IATA")
        If checkString = "#" Then
            Exit Sub
        Else
            fltStatsJsonStringDest06 = returnData("https://api.flightstats.com/flex/flightstatus/rest/v2/json/airport/status/" & arrivalAirport & "/arr/" & yearNow & "/" & monthNow & "/" & dayNow & "/6?appId=" & appName & "&appKey=" & apiKey & "&utc=false&numHours=6&carrier=" & airlineToSearch & "&codeType=IATA")
            fltStatsJsonStringDest12 = returnData("https://api.flightstats.com/flex/flightstatus/rest/v2/json/airport/status/" & arrivalAirport & "/arr/" & yearNow & "/" & monthNow & "/" & dayNow & "/12?appId=" & appName & "&appKey=" & apiKey & "&utc=false&numHours=6&carrier=" & airlineToSearch & "&codeType=IATA")
            fltStatsJsonStringDest18 = returnData("https://api.flightstats.com/flex/flightstatus/rest/v2/json/airport/status/" & arrivalAirport & "/arr/" & yearNow & "/" & monthNow & "/" & dayNow & "/18?appId=" & appName & "&appKey=" & apiKey & "&utc=false&numHours=6&carrier=" & airlineToSearch & "&codeType=IATA")
            'https://api.flightstats.com/flex/flightstatus/rest/v2/json/airport/status/LHR/arr/2015/2/11/6?appId=d3b8b796&appKey=4dbd0882d201bcf8a608401b72ebf153&utc=false&numHours=6&carrier=DL&codeType=IATA

            'objects to hold the JSON response values
            'incoming flights
            Dim inFlightInfo06 As mainAPICallRoot = Newtonsoft.Json.JsonConvert.DeserializeObject(Of mainAPICallRoot)(fltStatsJsonStringDest06)
            Dim inFlightInfo12 As mainAPICallRoot = Newtonsoft.Json.JsonConvert.DeserializeObject(Of mainAPICallRoot)(fltStatsJsonStringDest12)
            Dim inFlightInfo18 As mainAPICallRoot = Newtonsoft.Json.JsonConvert.DeserializeObject(Of mainAPICallRoot)(fltStatsJsonStringDest18)


            'array to hold all of the objects so that they can be navigated to get the required flight numbers
            Dim InFlightArray() As mainAPICallRoot = {inFlightInfo06, inFlightInfo12, inFlightInfo18}

            'gets the length of each of each of the flight status objects
            For counter = 0 To 2
                arrayOfLengths(counter) = InFlightArray(counter).FlightStatuses.Length
            Next

            'copies over the relevant data so the gridviews can be filled
            'this works by referencing the 'container' array and then going to the object within that container
            arrayReferenceCounter = 0
            For outCounter = 0 To 2
                For inCounter = 0 To arrayOfLengths(outCounter) - 1
                    If InFlightArray(outCounter).FlightStatuses(inCounter).CarrierFsCode = "DL" Then
                        'might need to add some more fields depending on the daily sheet requirements
                        identsArray(arrayReferenceCounter).carrierFSCode = InFlightArray(outCounter).FlightStatuses(inCounter).CarrierFsCode
                        identsArray(arrayReferenceCounter).flightNumber = InFlightArray(outCounter).FlightStatuses(inCounter).FlightNumber
                        identsArray(arrayReferenceCounter).arrivalTerminal = InFlightArray(outCounter).FlightStatuses(inCounter).AirportResources.ArrivalTerminal
                        'checks to see if there is an arrival time
                        If IsNothing(InFlightArray(outCounter).FlightStatuses(inCounter).OperationalTimes.ActualGateArrival) Then
                            identsArray(arrayReferenceCounter).actualGateArrival = "N/A"
                        Else
                            identsArray(arrayReferenceCounter).actualGateArrival = InFlightArray(outCounter).FlightStatuses(inCounter).OperationalTimes.ActualGateArrival.DateLocal.ToString
                        End If
                        arrayReferenceCounter = arrayReferenceCounter + 1
                    End If
                Next
            Next

            'routine to adjust the length of the array to hold the flight information for the datagridviews
            arrayLengthCounter = 0
            For counter = 0 To identsArray.Length - 1
                If identsArray(counter).flightNumber <> Nothing Then
                    arrayLengthCounter = arrayLengthCounter + 1
                End If
            Next

            'adjusts the array to save memory so as to save memory
            ReDim Preserve identsArray(arrayLengthCounter)

            'puts the data into two further arrays according to the terminal
            terminal4ReferenceCounter = 0
            terminal3ReferenceCounter = 0
            terminalOthersReferenceCounter = 0
            For counter = 0 To identsArray.Length - 1
                Select Case identsArray(counter).arrivalTerminal
                    Case Is = "4"
                        terminal4DGVArray(terminal4ReferenceCounter) = identsArray(counter)
                        terminal4ReferenceCounter = terminal4ReferenceCounter + 1
                    Case Is = "3"
                        terminal3DGVArray(terminal3ReferenceCounter) = identsArray(counter)
                        terminal3ReferenceCounter = terminal3ReferenceCounter + 1
                    Case Else
                        terminalOthersDGVArray(terminalOthersReferenceCounter) = identsArray(counter)
                        terminalOthersReferenceCounter = terminalOthersReferenceCounter + 1
                End Select
            Next

            'adjusts the array to save memory as large arrays that contain little or no
            'data are very inefficient
            terminal4ReferenceCounter = 0
            terminal3ReferenceCounter = 0
            terminalOthersReferenceCounter = 0
            For counter = 0 To identsArray.Length - 1
                If terminal4DGVArray(counter).flightNumber <> Nothing Then
                    terminal4ReferenceCounter = terminal4ReferenceCounter + 1
                End If
                If terminal3DGVArray(counter).flightNumber <> Nothing Then
                    terminal3ReferenceCounter = terminal3ReferenceCounter + 1
                End If
                If terminalOthersDGVArray(counter).flightNumber <> Nothing Then
                    terminalOthersReferenceCounter = terminalOthersReferenceCounter + 1
                End If
            Next
            ReDim Preserve terminal4DGVArray(terminal4ReferenceCounter - 1)
            ReDim Preserve terminal3DGVArray(terminal3ReferenceCounter - 1)
            ReDim Preserve terminalOthersDGVArray(terminalOthersReferenceCounter - 1)

            'returns to the routine to fill the datagrid views
        End If
        

    End Sub

    Function returnData(ByVal inURI As String) As String
        Dim genericDataString As String
        Dim fltStatsJsonResponse As WebResponse
        Dim fltStatsJsonStreamReader As StreamReader

        'creates the web request
        flightStatsRequest = WebRequest.Create(inURI)
        'gets the response from the server
        Try
            fltStatsJsonResponse = flightStatsRequest.GetResponse
            'creates a stream reader to read the text from the response
            Dim fltAwrJsonStream As Stream = fltStatsJsonResponse.GetResponseStream()
            'decodes the stream
            fltStatsJsonStreamReader = New StreamReader(fltAwrJsonStream)
            'puts the results of decoding the stream into a string for the 
            'JSON function to parse
            genericDataString = fltStatsJsonStreamReader.ReadToEnd
            'returns the string to a variable in the main to use for processing
            Return genericDataString
        Catch ex As Exception
            MessageBox.Show("Data for the Daily Sheet cannot be retrieved because there is no Internet connection", "LEMS Error: No Internet Connection", MessageBoxButtons.OK)
            genericDataString = "#"
            Return genericDataString
        End Try

    End Function

    Public Sub fillDGVs()
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim cmd As New OleDbCommand
        Dim sql As String

        'first clear the dgvs
        dtT4Operation.Clear()
        dtT3Operation.Clear()
        dtOtherOperations.Clear()

        'gets all the entries in terminal 4 for the sheet of the current day and fills the dataset with the data 
        sql = "SELECT [Entries].[Entry_ID],[Entries].[Flt_In], [Entries].[Ship], [Entries].[Time_In], [Entries].[Gate], [Entries].[Flt_Out], [Entries].[Time_Out], [Entries].[Log_Items], [Entries].[AMTs], [Entries].[Comments] FROM [Entries] WHERE [Entries].[Terminal] = ? AND [Entries].[Sheet_ID] = ?"
        cmd = New OleDbCommand(sql, connec)
        cmd.Parameters.AddWithValue("@Terminal", 4)
        cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
        connec.Open()
        drT4Operation = cmd.ExecuteReader
        dtT4Operation.Load(drT4Operation)
        connec.Close()

        'gets all the entries in terminal 3 for the sheet of the current day and fills the dataset with the data
        sql = "SELECT [Entries].[Entry_ID], [Entries].[Flt_In], [Entries].[Ship], [Entries].[Time_In], [Entries].[Gate], [Entries].[Flt_Out], [Entries].[Time_Out], [Entries].[Log_Items], [Entries].[AMTs], [Entries].[Comments] FROM [Entries] WHERE [Entries].[Terminal] = ? AND [Entries].[Sheet_ID] = ?"
        cmd = New OleDbCommand(sql, connec)
        cmd.Parameters.AddWithValue("@Terminal", 3)
        cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
        connec.Open()
        drT3Operation = cmd.ExecuteReader
        dtT3Operation.Load(drT3Operation)
        connec.Close()

        'gets all the entires for the other terminals for the sheet of the current day and fills the dataset with the data
        sql = "SELECT [Entries].[Entry_ID], [Entries].[Flt_In], [Entries].[Ship], [Entries].[Time_In], [Entries].[Gate], [Entries].[Flt_Out], [Entries].[Time_Out], [Entries].[Log_Items], [Entries].[AMTs], [Entries].[Comments] FROM [Entries] WHERE [Entries].[Terminal] <> ? AND  [Entries].[Terminal] <> ? AND [Entries].[Sheet_ID] = ? ORDER BY [Entries].[Terminal] ASC"
        cmd = New OleDbCommand(sql, connec)
        cmd.Parameters.AddWithValue("@Terminal3", 3)
        cmd.Parameters.AddWithValue("@Terminal4", 4)
        cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
        connec.Open()
        drOtherOperations = cmd.ExecuteReader
        dtOtherOperations.Load(drOtherOperations)
        connec.Close()

        
        '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        '///////////////////////////////////////////////////////////////////
        'FILL the datasets/datagridviews in the Management and Engineer sides! I.e bind the dgvs
        '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        '///////////////////////////////////////////////////////////////////

        MgmtLEMSProcess.CDST4DailySheetDGV.DataSource = dtT4Operation
        EngrLEMSProcess.CDST4DailySheetDGV.DataSource = dtT4Operation
        MgmtLEMSProcess.CDST3DailySheetDGV.DataSource = dtT3Operation
        EngrLEMSProcess.CDST3DailySheetDGV.DataSource = dtT3Operation
        Extra_Terminals_Form.CDSAllDailySheetDGV.DataSource = dtOtherOperations

    End Sub

    Public Sub saveDGV(ByVal callType As String) 'ByVal entryID as Integer
        'save each row of the DGV to the database when the button is pressed and firstSave is true
        'this needs changing to detect which side saved the dgv then use those dgvs
        'the above array needs updating when the three other DGVs are added to the Engineer side
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim sql As String

        'this updates ALL of the entries with the current sheet number
        'this routine is called when the save button is pressed
        'and when a cell is changed
        sql = "UPDATE [Entries] SET [Entries].[Ship] = ?, [Entries].[Time_In] = ?, [Entries].[Gate] = ?, [Entries].[Flt_Out] = ?, [Entries].[Time_Out] = ?, [Entries].[Log_Items] = ?, [Entries].[AMTs] = ?, [Entries].[Comments] = ? WHERE [Entries].[Entry_ID] = ?"
        Dim cmd = New OleDbCommand(sql, connec)
        cmd.CommandType = CommandType.Text
        connec.Open()

        'checks to see which side of LEMS called the routine using a SELECT CASE routine
        Select Case callType
            Case Is = "mgmtLEMS"
                Dim dgvArrayMgmt() As DataGridView = {MgmtLEMSProcess.CDST4DailySheetDGV, MgmtLEMSProcess.CDST3DailySheetDGV}
                Dim dtArrayMgmt() As System.Data.DataTable = {dtT4Operation, dtT3Operation}
                For counter = 0 To 1 'total number of DS DGVs and datatables
                    For innerCounter = 0 To dtArrayMgmt(counter).Rows.Count - 1
                        'insert parameters here for each DGV row
                        If dtArrayMgmt(counter)(innerCounter).RowState = DataRowState.Modified Then
                            cmd.Parameters.AddWithValue("@Ship", dtArrayMgmt(counter).Rows(innerCounter)(2))
                            cmd.Parameters.AddWithValue("@Time_In", dtArrayMgmt(counter).Rows(innerCounter)(3))
                            cmd.Parameters.AddWithValue("@Gate", dtArrayMgmt(counter).Rows(innerCounter)(4))
                            cmd.Parameters.AddWithValue("@Flt_Out", dtArrayMgmt(counter).Rows(innerCounter)(5))
                            cmd.Parameters.AddWithValue("@Time_Out", dtArrayMgmt(counter).Rows(innerCounter)(6))
                            cmd.Parameters.AddWithValue("@Log_Items", dtArrayMgmt(counter).Rows(innerCounter)(7))
                            cmd.Parameters.AddWithValue("@AMTs", dtArrayMgmt(counter).Rows(innerCounter)(8))
                            cmd.Parameters.AddWithValue("@Comments", dtArrayMgmt(counter).Rows(innerCounter)(9))
                            cmd.Parameters.AddWithValue("@Entry_ID", dtArrayMgmt(counter).Rows(innerCounter)(0))
                            cmd.ExecuteNonQuery()
                            cmd.Parameters.Clear()
                        End If
                    Next
                Next
            Case Is = "engrLEMS"
                Dim dgvArrayEngr() As DataGridView = {EngrLEMSProcess.CDST4DailySheetDGV, EngrLEMSProcess.CDST3DailySheetDGV}
                Dim dtArrayEngr() As System.Data.DataTable = {dtT4Operation, dtT3Operation}
                For counter = 0 To 1 'total number of DS DGVs and datatables
                    For innerCounter = 0 To dgvArrayEngr(counter).RowCount - 1
                        'insert parameters here for each DGV row
                        'need to change the extra form DGV into 3 DGVs so that each TERMINAL can be saved
                        'rather than just a location in the table
                        'this will preserve relationships
                        If dtArrayEngr(counter)(innerCounter).RowState = DataRowState.Modified Then
                            cmd.Parameters.AddWithValue("@Ship", dgvArrayEngr(counter).Rows(innerCounter).Cells(1))
                            cmd.Parameters.AddWithValue("@Time_In", dgvArrayEngr(counter).Rows(innerCounter).Cells(2))
                            cmd.Parameters.AddWithValue("@Gate", dgvArrayEngr(counter).Rows(innerCounter).Cells(3))
                            cmd.Parameters.AddWithValue("@Flt_Out", dgvArrayEngr(counter).Rows(innerCounter).Cells(4))
                            cmd.Parameters.AddWithValue("@Time_Out", dgvArrayEngr(counter).Rows(innerCounter).Cells(5))
                            cmd.Parameters.AddWithValue("@Log_Items", dgvArrayEngr(counter).Rows(innerCounter).Cells(6))
                            cmd.Parameters.AddWithValue("@AMTs", dgvArrayEngr(counter).Rows(innerCounter).Cells(7))
                            cmd.Parameters.AddWithValue("@Comments", dgvArrayEngr(counter).Rows(innerCounter).Cells(8))
                            cmd.Parameters.AddWithValue("@Entry_ID", dtArrayEngr(counter).Rows(innerCounter)(0))
                            cmd.ExecuteNonQuery()
                            cmd.Parameters.Clear()
                        End If
                    Next
                Next
        End Select

        ''this saves from the common extra terminals form
        'sql = "UPDATE [Entries] SET [Entries].[Ship] = ?, [Entries].[Time_In] = ?, [Entries].[Gate] = ?, [Entries].[Flt_Out] = ?, [Entries].[Time_Out] = ?, [Entries].[Log_Items] = ?, [Entries].[AMTs] = ?, [Entries].[Comments] = ?, [Entries].[Terminal] = ? WHERE [Entries].[Entry_ID] = ?"
        'cmd = New OleDbCommand(sql, connec)
        'cmd.CommandType = CommandType.Text
        'For counter = 0 To 3 'total number of DS DGVs
        '    For innerCounter = 0 To Extra_Terminals_Form.CDSAllDailySheetDGV.RowCount - 1
        '        'insert parameters here for each DGV row
        '        'this will preserve relationships
        '        cmd.Parameters.AddWithValue("@Ship", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(1))
        '        cmd.Parameters.AddWithValue("@Time_In", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(2))
        '        cmd.Parameters.AddWithValue("@Gate", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(3))
        '        cmd.Parameters.AddWithValue("@Flt_Out", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(4))
        '        cmd.Parameters.AddWithValue("@Time_Out", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(5))
        '        cmd.Parameters.AddWithValue("@Log_Items", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(6))
        '        cmd.Parameters.AddWithValue("@AMTs", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(7))
        '        cmd.Parameters.AddWithValue("@Comments", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(8))
        '        cmd.Parameters.AddWithValue("@Terminal", Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(innerCounter).Cells(9))
        '        cmd.Parameters.AddWithValue("@Entry_ID", dtOtherOperations.Rows(innerCounter)(0))
        '        cmd.ExecuteNonQuery()
        '        cmd.Parameters.Clear()
        '    Next
        'Next

        'close the connection
        connec.Close()

        'refill the datagridviews
        fillDGVs()
        'fill the RAD/RON part of the dailysheet
        fillRADRONView()
    End Sub

    Private Sub fillRADRONView()
        'loop through the rows in the datagridviews
        'find the rows that have time between arrival and departure of more than 3.5 hours
        'add the details to the RAD/RON datagridview
        Dim inTime As DateTime
        Dim tempOutTime As String
        Dim outTime As DateTime
        Dim timeDiff As TimeSpan

        'repeated for each datagridview

        For rowCounter = 0 To MgmtLEMSProcess.CDST4DailySheetDGV.Rows.Count - 1
            'check that the column actually contains a time
            If Not IsNothing(MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(6).Value) Then
                tempOutTime = MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(6).Value.ToString
                If IsDate(tempOutTime) Then
                    'find the difference in time
                    inTime = DateTime.Parse(MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(3).Value)
                    outTime = DateTime.Parse(MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(6).Value)
                    timeDiff = outTime.Subtract(inTime)
                    'if the time exceeds 3.5 hours then add to the RAD/RON table
                    If timeDiff.TotalMinutes >= 210 Then
                        MgmtLEMSProcess.MgmtCDSRadRonDGV.Rows.Add(Math.Round(timeDiff.TotalHours, 2), MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(2).Value, MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(8).Value, MgmtLEMSProcess.CDST4DailySheetDGV.Rows(rowCounter).Cells(9).Value)
                    End If
                End If
            End If
        Next

        For rowCounter = 0 To MgmtLEMSProcess.CDST3DailySheetDGV.Rows.Count - 1
            'check that the column actually contains a time
            If Not IsNothing(MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(6).Value) Then
                tempOutTime = MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(6).Value.ToString
                If IsDate(tempOutTime) Then
                    'find the difference in time
                    inTime = DateTime.Parse(MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(3).Value)
                    outTime = DateTime.Parse(MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(6).Value)
                    timeDiff = outTime.Subtract(inTime)
                    'if the time exceeds 3.5 hours then add to the RAD/RON table
                    If timeDiff.TotalMinutes >= 210 Then
                        MgmtLEMSProcess.MgmtCDSRadRonDGV.Rows.Add(Math.Round(timeDiff.TotalHours, 2), MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(2).Value, MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(8).Value, MgmtLEMSProcess.CDST3DailySheetDGV.Rows(rowCounter).Cells(9).Value)
                    End If
                End If
            End If
        Next

        For rowCounter = 0 To Extra_Terminals_Form.CDSAllDailySheetDGV.Rows.Count - 1
            'check that the column actually contains a time
            tempOutTime = Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(6).Value
            If IsDate(tempOutTime) Then
                'find the difference in time
                inTime = DateTime.Parse(Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(3).Value)
                outTime = DateTime.Parse(Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(5).Value)
                timeDiff = outTime.Subtract(inTime)
                'if the time exceeds 3.5 hours then add to the RAD/RON table
                If timeDiff.TotalMinutes >= 210 Then
                    MgmtLEMSProcess.MgmtCDSRadRonDGV.Rows.Add(Math.Round(timeDiff.TotalHours, 2), Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(2).Value, Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(8).Value, Extra_Terminals_Form.CDSAllDailySheetDGV.Rows(rowCounter).Cells(9).Value)
                End If
            End If
        Next

    End Sub

    Public Sub saveDSChanges()
        'help was found and the following code was adapted from Microsoft's MSDN Library at the following URL:
        'https://msdn.microsoft.com/en-us/library/0f8054fy%28v=vs.110%29.aspx
        'this may replace the entire SQL writeback routine- check!

        'If dsT4Operation.HasChanges(DataRowState.Modified) Then
        '    Dim dsChangesT4 As DataSet
        '    dsChangesT4 = dsT4Operation.GetChanges(DataRowState.Modified)
        '    dAdapT4Operation.Update(dsChangesT4)
        'End If

        'If dsT3Operation.HasChanges(DataRowState.Modified) Then
        '    Dim dsChangesT3 As DataSet
        '    dsChangesT3 = dsT3Operation.GetChanges(DataRowState.Modified)
        '    dAdapT3Operation.Update(dsChangesT3)
        'End If

        'If dsOtherOperations.HasChanges(DataRowState.Modified) Then
        '    Dim dsChangesOthers As DataSet
        '    dsChangesOthers = dsOtherOperations.GetChanges(DataRowState.Modified)
        '    dAdapOtherOperations.Update(dsChangesOthers)
        'End If

    End Sub

    Public Sub createHardCopyDS()
        'this routine sends the datagridviews to Excel,
        'then saves it as a pdf

        'check first to see if the file exists
        'then either create or import the file

        'the following code was adapted from:
        'http://vb.net-informations.com/excel-2007/vb.net_excel_2007_create_file.htm
        'http://stackoverflow.com/questions/6983141/changing-cell-color-of-excel-sheet-via-vb-net
        'http://stackoverflow.com/questions/13121425/border-around-each-cell-in-a-range

        Dim xlApp As Excel.Application = New Microsoft.Office.Interop.Excel.Application()
        Dim xlworkBooks As Excel.Workbooks
        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkSheet As Excel.Worksheet
        Dim misValue As Object = System.Reflection.Missing.Value
        Dim headerStyle As Excel.Style
        Dim deptStyle As Excel.Style
        Dim terminalStyle As Excel.Style
        Dim dataStyle As Excel.Style
        'temporary datagridviews to write to excel:
        Dim dgvT4Operation As New DataGridView
        Dim dgvT3Operation As New DataGridView
        Dim dgvOtherOperations As New DataGridView
        Dim nextBlankRowIndex As Integer
        Dim firstRowAfterIndex As Integer
        Dim nextT3Label As Integer
        Dim startT3StyleIndex As Integer
        Dim lastDataRow As Excel.Range
        Dim dynamicNext As Excel.Range
        Dim listOfPhoneLabels() As System.Windows.Forms.Label = {MgmtLEMSProcess.MgmtCDSPhoneTICLab, MgmtLEMSProcess.MgmtCDSPhoneT4Lab, MgmtLEMSProcess.MgmtCDSPhoneNo1Lab, MgmtLEMSProcess.MgmtCDSPhoneNo2Lab, MgmtLEMSProcess.MgmtCDSPhoneNo3Lab, MgmtLEMSProcess.MgmtCDSPhoneT3Lab, MgmtLEMSProcess.MgmtCDSPhoneNo4Lab, MgmtLEMSProcess.MgmtCDSPhoneNo5Lab, MgmtLEMSProcess.MgmtCDSPhoneNo6Lab, MgmtLEMSProcess.MgmtCDSPhoneNo7Lab, MgmtLEMSProcess.MgmtCDSPhoneNo8Lab, MgmtLEMSProcess.MgmtCDSPhoneTDYLab}
        Dim listOfAMTComboBoxes() As System.Windows.Forms.ComboBox = {MgmtLEMSProcess.MgmtCDSPhoneTICCb, MgmtLEMSProcess.MgmtCDSPhoneT4Cb, MgmtLEMSProcess.MgmtCDSPhoneNo1Cb, MgmtLEMSProcess.MgmtCDSPhoneNo2Cb, MgmtLEMSProcess.MgmtCDSPhoneNo2Cb, MgmtLEMSProcess.MgmtCDSPhoneNo3Cb, MgmtLEMSProcess.MgmtCDSPhoneT3CB, MgmtLEMSProcess.MgmtCDSPhoneNo4CB, MgmtLEMSProcess.MgmtCDSPhoneNo5CB, MgmtLEMSProcess.MgmtCDSPhoneNo6CB, MgmtLEMSProcess.MgmtCDSPhoneNo7CB, MgmtLEMSProcess.MgmtCDSPhoneNo8CB}
        Dim todayDate As Date
        todayDate = Now.Date

        Dim filePathToSave As String = "C:\Users\zande_000\Documents\LEMSDSResources\DAILY_SHEETS\"

        'this is to convert the file to a pdf
        'taken and adapted for use from https://msdn.microsoft.com/en-us/library/bb407651%28v=office.12%29.aspx 
        Dim paramExportFilePath As String
        Dim paramExportFormat As XlFixedFormatType = XlFixedFormatType.xlTypePDF
        Dim paramExportQuality As XlFixedFormatQuality = XlFixedFormatQuality.xlQualityStandard
        Dim paramOpenAfterPublish As Boolean = False
        Dim paramIncludeDocProps As Boolean = True
        Dim paramIgnorePrintAreas As Boolean = True
        Dim paramFromPage As Object = Type.Missing
        Dim paramToPage As Object = Type.Missing


        'copied code
        xlworkBooks = xlApp.Workbooks
        xlWorkBook = xlworkBooks.Add(misValue)
        xlWorkSheet = xlWorkBook.Sheets("sheet1")

        'this code block sets all the relevant styles

        'this sets the row header style:
        'adapted code
        headerStyle = xlWorkSheet.Application.ActiveWorkbook.Styles.Add("HeaderStyle")
        headerStyle.Interior.Color = System.Drawing.ColorTranslator.ToOle(ColorTranslator.FromHtml("#FF9900"))
        headerStyle.Font.Name = "Arial"
        headerStyle.Font.Size = 10
        'this sets the department font style
        deptStyle = xlWorkSheet.Application.ActiveWorkbook.Styles.Add("DeptStyle")
        deptStyle.Font.Name = "Arial"
        deptStyle.Font.Bold = True
        deptStyle.Font.Size = 24
        deptStyle.Font.Color = System.Drawing.ColorTranslator.ToOle(Color.DodgerBlue)
        'this sets the style for the terminal headers
        terminalStyle = xlWorkSheet.Application.ActiveWorkbook.Styles.Add("TerminalStyle")
        deptStyle.Font.Name = "Arial"
        deptStyle.Font.Bold = True
        deptStyle.Font.Size = 11
        deptStyle.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenterAcrossSelection
        'this sets the style for the data imported from the dataset
        dataStyle = xlWorkSheet.Application.ActiveWorkbook.Styles.Add("DataStyle")
        dataStyle.Interior.Color = System.Drawing.ColorTranslator.ToOle(ColorTranslator.FromHtml("#FFFF99"))
        dataStyle.Font.Name = "Arial"
        dataStyle.Font.Size = 10
        'this sets the style for the phones
        dataStyle = xlWorkSheet.Application.ActiveWorkbook.Styles.Add("PhoneStyle")
        dataStyle.Interior.Color = System.Drawing.ColorTranslator.ToOle(ColorTranslator.FromHtml("#D9D9D9"))
        dataStyle.Font.Name = "Arial"
        dataStyle.Font.Size = 10

        'below is my code
        'this sets the date and the department number
        xlWorkSheet.Cells(1, 2) = todayDate.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))
        xlWorkSheet.Range(xlWorkSheet.Cells(1, 2), xlWorkSheet.Cells(1, 3)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(1, 14)).Style = "DeptStyle"
        xlWorkSheet.Cells(1, 14) = "LHR/250"
        xlWorkSheet.Range(xlWorkSheet.Cells(1, 14), xlWorkSheet.Cells(1, 15)).Merge()

        'this sets the rows headers
        xlWorkSheet.Cells(3, 2) = "FLT IN"
        xlWorkSheet.Cells(3, 3) = "SHIP"
        xlWorkSheet.Cells(3, 4) = "TIME IN"
        xlWorkSheet.Cells(3, 5) = "GATE"
        xlWorkSheet.Cells(3, 6) = "FLT OUT"
        xlWorkSheet.Cells(3, 7) = "TIME OUT"
        xlWorkSheet.Cells(3, 8) = "LOG ITEMS"
        xlWorkSheet.Cells(3, 9) = "AMTS"
        xlWorkSheet.Cells(3, 10) = "COMMENTS"
        xlWorkSheet.Cells(3, 11) = "TERMINAL" '<-- FOR THE OTHER TERMINALS ONLY
        'this sets the style
        xlWorkSheet.Range(xlWorkSheet.Cells(3, 1), xlWorkSheet.Cells(3, 9)).Style = "HeaderStyle"
        xlWorkSheet.Range(xlWorkSheet.Cells(3, 1), xlWorkSheet.Cells(3, 9)).BorderAround2(Excel.XlLineStyle.xlContinuous, Excel.XlBorderWeight.xlMedium, Excel.XlColorIndex.xlColorIndexAutomatic, Color.Black)

        'set the demarkation for T4
        xlWorkSheet.Cells(4, 2) = "TERMINAL 4 OPERATION"
        xlWorkSheet.Range(xlWorkSheet.Cells(4, 2), xlWorkSheet.Cells(4, 11)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(4, 2), xlWorkSheet.Cells(4, 11)).Style = "TerminalStyle"

        'fill from the T4 dataset:
        'then insert the T3 header at the end of the range
        'the range will be calculated from where the data has finished being input
        'can do this by referencing the start cell and then finding the last row of the data
        fillDGVs()
        'converts the dataset into a datagridview so that the data is easier to copy 
        dgvT4Operation.DataSource = dtT4Operation
        dgvT3Operation.DataSource = dtT3Operation
        dgvOtherOperations.DataSource = dtOtherOperations

        'this copies out the T4 operation data
        'For rowCounter = 0 To dsT4Operation.Tables(0).Rows.Count - 1
        '    For columnCounter = 0 To dsT4Operation.Tables(0).Columns.Count - 2
        '        xlWorkSheet.Cells(rowCounter + 5, columnCounter + 1) = dgvT4Operation.Rows(rowCounter).Cells(columnCounter).Value
        '    Next
        'Next

        'finds the last row in the T4 operation data
        'taken and adapted for use from http://stackoverflow.com/questions/13169077/finding-last-row-in-excel-and-using-excel-range
        lastDataRow = xlWorkSheet.Rows.End(Excel.XlDirection.xlDown)
        'applies the appropriate style for the data
        xlWorkSheet.Range(xlWorkSheet.Cells(5, 2), xlWorkSheet.Cells(lastDataRow, 11)).Style = "DataStyle"
        xlWorkSheet.Range(xlWorkSheet.Cells(5, 2), xlWorkSheet.Cells(lastDataRow, 11)).Columns.AutoFit()

        'this finds the next blank row in the worksheet
        'taken and adapted for use from: http://stackoverflow.com/questions/12497804/finding-first-blank-row-then-writing-to-it
        nextBlankRowIndex = xlWorkSheet.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell).Offset(1, 0).Row
        nextT3Label = nextBlankRowIndex
        'adds the header
        xlWorkSheet.Cells(nextBlankRowIndex, 2) = "TERMINAL 3 OPERATION"
        xlWorkSheet.Range(xlWorkSheet.Cells(lastDataRow, 2), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(lastDataRow, 2), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Style = "TerminalStyle"

        'increases the index to start the new row of data
        firstRowAfterIndex = nextBlankRowIndex + 1
        'this copies out the T3 operation data
        'For rowCounter = 0 To dsT3Operation.Tables(0).Rows.Count - 1
        '    For columnCounter = 0 To dsT3Operation.Tables(0).Columns.Count - 2
        '        xlWorkSheet.Cells(rowCounter + firstRowAfterIndex, columnCounter + 1) = dgvT3Operation.Rows(rowCounter).Cells(columnCounter).Value
        '    Next
        'Next

        'finds the last row after the new data has been added
        dynamicNext = lastDataRow
        lastDataRow = xlWorkSheet.Rows.End(Excel.XlDirection.xlDown)
        xlWorkSheet.Range(xlWorkSheet.Cells(dynamicNext, 2), xlWorkSheet.Cells(lastDataRow, 11)).Style = "DataStyle"
        xlWorkSheet.Range(xlWorkSheet.Cells(dynamicNext, 2), xlWorkSheet.Cells(lastDataRow, 11)).Columns.AutoFit()

        'gets the next blank row
        nextBlankRowIndex = xlWorkSheet.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell).Offset(1, 0).Row
        'adds the header
        xlWorkSheet.Cells(nextBlankRowIndex, 2) = "ALL OTHER TERMINAL OPERATIONS"
        xlWorkSheet.Range(xlWorkSheet.Cells(lastDataRow, 2), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(lastDataRow, 2), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Style = "TerminalStyle"

        'increases the index to start the new row of data
        firstRowAfterIndex = nextBlankRowIndex + 1
        'this copies out the T3 operation data
        'For rowCounter = 0 To dsOtherOperations.Tables(0).Rows.Count - 1
        '    For columnCounter = 0 To dsOtherOperations.Tables(0).Columns.Count - 1
        '        xlWorkSheet.Cells(rowCounter + firstRowAfterIndex, columnCounter + 1) = dgvOtherOperations.Rows(rowCounter).Cells(columnCounter).Value
        '    Next
        'Next

        'writes out the RAD/RON datagridview
        'get the next clear row
        nextBlankRowIndex = xlWorkSheet.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell).Offset(1, 0).Row
        xlWorkSheet.Cells(nextBlankRowIndex, 3) = "GND TIME"
        xlWorkSheet.Cells(nextBlankRowIndex, 4) = "AMTS"
        xlWorkSheet.Cells(nextBlankRowIndex, 5) = "COMMENTS"
        xlWorkSheet.Range(xlWorkSheet.Cells(nextBlankRowIndex, 5), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(nextBlankRowIndex, 3), xlWorkSheet.Cells(nextBlankRowIndex, 11)).Style = "HeaderStyle"

        'increases the index to start the new row of data
        firstRowAfterIndex = nextBlankRowIndex + 1
        'this copies out the T3 operation data
        'For rowCounter = 0 To dsOtherOperations.Tables(0).Rows.Count - 1
        '    For columnCounter = 0 To dsOtherOperations.Tables(0).Columns.Count - 1
        '        xlWorkSheet.Cells(rowCounter + firstRowAfterIndex, columnCounter + 1) = dgvOtherOperations.Rows(rowCounter).Cells(columnCounter).Value
        '    Next
        'Next

        'fills the previously added data rows with the correct style
        dynamicNext = lastDataRow
        lastDataRow = xlWorkSheet.Rows.End(Excel.XlDirection.xlDown)
        xlWorkSheet.Range(xlWorkSheet.Cells(dynamicNext, 2), xlWorkSheet.Cells(lastDataRow, 11)).Style = "DataStyle"
        xlWorkSheet.Range(xlWorkSheet.Cells(dynamicNext, 2), xlWorkSheet.Cells(lastDataRow, 11)).Columns.AutoFit()

        'add the phone data from the right hand side of the view
        'simply copy over the values.
        xlWorkSheet.Cells(3, 14) = "PHONE"
        xlWorkSheet.Cells(3, 15) = "AMT"
        xlWorkSheet.Range(xlWorkSheet.Cells(3, 14), xlWorkSheet.Cells(3, 15)).Style = "HeaderStyle"
        xlWorkSheet.Cells(4, 14) = "Terminal 4"
        xlWorkSheet.Range(xlWorkSheet.Cells(4, 14), xlWorkSheet.Cells(4, 15)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(4, 14), xlWorkSheet.Cells(4, 15)).Style = "TerminalStyle"
        'hex value for phones (grey) is #D9D9D9
        For counter = 0 To 4
            xlWorkSheet.Cells((counter + 5), 14) = listOfPhoneLabels(counter).Text
            'add the value of the combo box
            xlWorkSheet.Cells((counter + 5), 14) = listOfAMTComboBoxes(counter).Text
        Next
        xlWorkSheet.Range(xlWorkSheet.Cells(5, 14), xlWorkSheet.Cells(8, 14)).Style = "PhoneStyle"
        'dyanmically adds the terminal 3 label on the same row as the text for TERMINAL 3 operation
        xlWorkSheet.Cells(nextT3Label, 14) = "Terminal 3"
        xlWorkSheet.Range(xlWorkSheet.Cells(nextT3Label, 14), xlWorkSheet.Cells(nextT3Label, 15)).Merge()
        xlWorkSheet.Range(xlWorkSheet.Cells(nextT3Label, 14), xlWorkSheet.Cells(nextT3Label, 15)).Style = "TerminalStyle"

        nextT3Label = nextT3Label + 1
        startT3StyleIndex = nextT3Label
        'check if this works because of the final loop over. Might need to be 11
        For counter = 5 To 10
            xlWorkSheet.Cells((nextT3Label), 14) = listOfPhoneLabels(counter).Text
            'add the value of the combo box
            xlWorkSheet.Cells((nextT3Label), 14) = listOfAMTComboBoxes(counter).Text
            nextT3Label = nextT3Label + 1
        Next
        xlWorkSheet.Range(xlWorkSheet.Cells(startT3StyleIndex, 14), xlWorkSheet.Cells(nextT3Label, 14)).Style = "PhoneStyle"
        'add the header images
        'though check this works
        xlWorkSheet.Shapes.AddPicture("C:\Users\zande_000\Documents\DeltaLems.png", Microsoft.Office.Core.MsoTriState.msoFalse, Microsoft.Office.Core.MsoTriState.msoCTrue, 50, 50, 300, 50)

        filePathToSave = filePathToSave & UCase(todayDate.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))) & "DAILY_SHEET"
        xlWorkBook.SaveAs(filePathToSave, Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue)
        'closes excel and completes the export
        releaseObject(xlWorkSheet)
        releaseObject(xlWorkBook)
        releaseObject(xlworkBooks)
        xlApp.Quit()
        releaseObject(xlApp)

        'reopens the file to save it as a pdf
        xlWorkBook = xlApp.Workbooks.Open(filePathToSave)
        paramExportFilePath = filePathToSave & ".pdf"
        xlWorkBook.ExportAsFixedFormat(paramExportFormat, paramExportFilePath, paramExportQuality, paramIncludeDocProps, paramIgnorePrintAreas, paramFromPage, paramToPage)
        xlWorkBook.Close(False)
        releaseObject(xlWorkBook)
        releaseObject(xlworkBooks)
        xlApp.Quit()
        releaseObject(xlApp)

        updateSheets(paramExportFilePath)

    End Sub

    Public Sub releaseObject(ByVal obj As Object)
        'the following code was taken and adapted from:
        'http://vb.net-informations.com/excel-2007/vb.net_excel_2007_create_file.htm

        Try
            System.Runtime.InteropServices.Marshal.ReleaseComObject(obj)
            obj = Nothing
        Catch ex As Exception
            obj = Nothing
        End Try

    End Sub

    Public Sub updateSheets(ByVal inName As String)
        Dim DBconn As String = "provider=Microsoft.ACE.oledb.12.0;"
        Dim dbfilename As String = GetFolderPath(SpecialFolder.MyDocuments) & "\LEMSDataBase.accdb"
        Dim DBsource As String = "Data Source=" & dbfilename
        Dim connec As System.Data.OleDb.OleDbConnection = New System.Data.OleDb.OleDbConnection(DBconn & DBsource)
        Dim sql As String

        'this updates the current sheet with the associated file
        sql = "UPDATE [Sheet] SET [Sheet].[Sheet_Filename] = ? WHERE [Entries].[Sheet_ID] = ?"
        Dim cmd = New OleDbCommand(sql, connec)
        cmd.CommandType = CommandType.Text
        cmd.Parameters.AddWithValue("@Sheet_Filename", inName)
        cmd.Parameters.AddWithValue("@Sheet_ID", sheetID)
        connec.Open()
        cmd.ExecuteNonQuery()
        connec.Close()
    End Sub

    Private Sub loadDSRecipients()
        'load the daily sheet recipients
        Dim localCounter As Integer

        FileOpen(1, "C:\Users\zande_000\Documents\LEMSSystem\DSrecipients.txt", OpenMode.Input)
        Do
            localDsRecipients(localCounter) = LineInput(1)
            localCounter = localCounter + 1
        Loop Until EOF(1)
        FileClose(1)

    End Sub

    Public Sub sendDS()
        'take in the hard copy pdf of the daily sheet for the current day
        'set email title to Daily Sheet for (and the current date)

        'with thanks to Joshua van Leuween for providing his code
        'as a basis for writing this routine
        'code was also taken and adapted for use from:
        'http://www.tutorialspoint.com/vb.net/vb.net_send_email.htm
        'after a Google search for 'email in vb.net'

        'have a listbox of recipients, loop through and add them

        'filepath for attachment
        Dim filePathToSave As String = "C:\Users\zande_000\Documents\LEMSDSResources\DAILY_SHEETS\"
        Dim todayDate As Date
        'email variables- credentials, server details and the email message
        Dim credentials As New NetworkCredential '<-- need to set the credentials in the settings, save to an encrypted text file
        Dim smtp_Server As New Mail.SmtpClient '<-- need to set the client and the port- FIND OUT
        Dim e_mail As New MailMessage

        Dim subject As String
        Dim bodyText As String
        Dim attachment As System.Net.Mail.Attachment

        'show the page to enter the email address and password
        DailySheetOperationsEmailCredentials.Show()
        'variables are copied over in the form above

        'set the filepath for the attachment
        todayDate = Now.Date
        filePathToSave = filePathToSave & UCase(todayDate.ToString("D", CultureInfo.CreateSpecificCulture("en-US"))) & "DAILY_SHEET"
        attachment = New Mail.Attachment(filePathToSave)

        'set the credentials
        credentials = New NetworkCredential(senderEmpID, senderPassword)

        'set the smtp details
        smtp_Server.UseDefaultCredentials = False
        smtp_Server.Credentials = credentials
        smtp_Server.EnableSsl = False

        'set up the variables for the email
        subject = "Daily Sheet for " & todayDate.ToShortDateString
        bodyText = ""

        'set the email items
        e_mail = New MailMessage
        e_mail.From = New MailAddress(senderAddress)
        For counter = 0 To localDsRecipients.Length - 1
            If Not IsNothing(localDsRecipients(counter)) Then
                e_mail.To.Add(localDsRecipients(counter))
            End If
        Next
        e_mail.Subject = subject
        e_mail.IsBodyHtml = False
        e_mail.Body = bodyText

        'add the attachment
        e_mail.Attachments.Add(attachment)

        'send the email
        smtp_Server.Send(e_mail)

        'notify the user the email has been sent
        MessageBox.Show("Daily Sheet for " & todayDate.ToShortDateString & "sent.", "LEMS Message: Daily Sheet Email Sent",
                        MessageBoxButtons.OK, MessageBoxIcon.Information)

    End Sub

End Module
